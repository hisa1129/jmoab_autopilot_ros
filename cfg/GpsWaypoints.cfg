#!/usr/bin/env python

PACKAGE = "jmoab_autopilot_ros"

from dynamic_reconfigure.parameter_generator_catkin import *
import os

cfg_file_name = "GpsWaypoints"

# rospack = rospkg.RosPack()
# jmoab_autopilot_ros_path = rospack.get_path("jmoab_autopilot_ros")
# param_list_name = cfg_file_name + "_param_list.txt"
# param_list_path = os.path.join(jmoab_autopilot_ros_path, "cfg", param_list_name)

# f = open(param_list_path, "r")
# lines = f.read().splitlines()
# param_list = []
# for line in lines:
# 	param = line.split(",")
# 	name = str(param[0])
# 	_type = str(param[1])
# 	desc = str(param[2])
# 	if _type == "double_t":
# 		real_type = double_t
# 		def_val = float(param[3])
# 		min_val = float(param[4])
# 		max_val = float(param[5])
# 		param_list.append((name, real_type, desc, def_val, min_val, max_val))
# 	elif _type == "int_t":
# 		real_type = int_t
# 		def_val = int(param[3])
# 		min_val = int(param[4])
# 		max_val = int(param[5])
# 		param_list.append((name, real_type, desc, def_val, min_val, max_val))
# 	elif _type == "str_t":
# 		real_type = str_t
# 		def_val = param[3]
# 		param_list.append((name, real_type, desc, def_val))
# 	elif _type == "bool_t":
# 		real_type = bool_t
# 		if param[3] == "True":
# 			def_val = True
# 		elif param[3] == "False":
# 			def_val = False
# 		else:
# 			def_val = False
# 		param_list.append((name, real_type, desc, def_val))

# f.close()


gen = ParameterGenerator()

# gen.add(name, param_type, level, description, default_val, min_val, max_val)
# for elem in param_list:
# 	if (elem[1] == double_t) or (elem[1] == int_t):
# 		gen.add(elem[0], elem[1], 0, elem[2], elem[3], elem[4], elem[5])
# 	else:
# 		gen.add(elem[0], elem[1], 0, elem[2], elem[3])



gen.add("max_start_str", int_t, 0, "maximum sbus steering to make the cart start turning right", 1054, 1024, 1100)
gen.add("min_start_str", int_t, 0, "minimum sbus steering to make the cart start turning left", 986, 948, 1024)
gen.add("str_adj", int_t, 0, "sbus steering range adjuster from max/min start str for PID controller", 100,0,400)
gen.add("skid_adj", int_t, 0, "sbus steering range adjuster from max/min start str for pivot turning", 80,0,400)
gen.add("max_start_thr", int_t, 0, "maximum sbus throttle to make the cart start moving forward", 1080,1024,1200)
gen.add("goal_dist_thresh", double_t, 0, "if distance from bot and target point less than this value, it considers as reached the point",0.2,0.1,1.0)
gen.add("goal_ang_thresh", double_t, 0, "if differences angle between bot and goal heading is less than this, it considers as same heading", 1.0,0.5,10.0)
gen.add("x_track_error_start", double_t, 0, "a minimum distance from route to the robot to make the x-track PID controller start working", 0.3,0.1,1.0)
gen.add("pid_hdg_out_thresh", double_t, 0, "if output hdg pid less than this, pid is not using", 1.0, 0.0, 50.0)
gen.add("pid_x_out_thresh", double_t, 0, "if output x-track pid less than this, pid is not using", 0.1, 0.0, 50.0)
gen.add("hdg_p", double_t, 0, "This is P gain value of heading control", 1.0,0.0,1000.0)
gen.add("hdg_i", double_t, 0, "This is I gain value of heading control", 0.0,0.0,1000.0)
gen.add("hdg_d", double_t, 0, "This is D gain value of heading control", 0.0,0.0,1000.0)
gen.add("cross_p", double_t, 0, "This is P gain value of cross-track-error control", 1.0,0.0,1000.0)
gen.add("cross_i", double_t, 0, "This is I gain value of cross-track-error control", 0.0,0.0,1000.0)
gen.add("cross_d", double_t, 0, "This is D gain value of cross-track-error control", 0.0,0.0,1000.0)



exit(gen.generate(PACKAGE, "jmoab_autopilot_ros", cfg_file_name))