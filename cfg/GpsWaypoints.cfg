#!/usr/bin/env python

PACKAGE = "jmoab_autopilot_ros"

from dynamic_reconfigure.parameter_generator_catkin import *
import os

cfg_file_name = "GpsWaypoints"

gen = ParameterGenerator()

gen.add("max_start_str", int_t, 0, "maximum sbus steering to make the cart start turning right", 1054, 1024, 1100)
gen.add("min_start_str", int_t, 0, "minimum sbus steering to make the cart start turning left", 986, 948, 1024)
gen.add("str_adj", int_t, 0, "sbus steering range adjuster from max/min start str for PID controller", 100,0,400)
gen.add("skid_adj", int_t, 0, "sbus steering range adjuster from max/min start str for pivot turning", 80,0,400)
gen.add("str_mid", int_t, 0, "sbus steering middle, it would be used for trimming left/right in case of go straight to make the cart not curve", 1024,924,1124)
gen.add("max_start_thr", int_t, 0, "maximum sbus throttle to make the cart start moving forward", 1080,1024,1200)
gen.add("thr_adj", int_t, 0, "sbus throttle range adjuster from max_start_thr for a navigation speed", 74,0,400)
gen.add("thr_slowest", int_t, 0, "a slowest throttle in case of short distance travel", 1140,1024,1200)
gen.add("thr_mid", int_t, 0, "sbus throttle middle, it would be used for turning in place or stop moment", 1024,924,1124)
gen.add("goal_dist_thresh", double_t, 0, "if distance from bot and target point less than this value, it considers as reached the point",0.2,0.1,1.0)
gen.add("goal_ang_thresh", double_t, 0, "if differences angle between bot and goal heading is less than this, it considers as same heading", 1.0,0.5,10.0)
gen.add("x_track_error_start", double_t, 0, "a minimum distance from route to the robot to make the x-track PID controller start working", 0.3,0.0,1.0)
gen.add("x_track_repose_dist", double_t, 0, "a minimum distance from route to the robot to start re-target heading again, when bot goes out too far", 0.4,0.0,1.0)
gen.add("pid_hdg_out_thresh", double_t, 0, "if output hdg pid less than this, pid is not using", 1.0, 0.0, 50.0)
gen.add("pid_x_out_thresh", double_t, 0, "if output x-track pid less than this, pid is not using", 0.1, 0.0, 50.0)
gen.add("hdg_p", double_t, 0, "This is P gain value of heading control", 1.0,0.0,1000.0)
gen.add("hdg_i", double_t, 0, "This is I gain value of heading control", 0.0,0.0,1000.0)
gen.add("hdg_d", double_t, 0, "This is D gain value of heading control", 0.0,0.0,1000.0)
gen.add("cross_p", double_t, 0, "This is P gain value of cross-track-error control", 1.0,0.0,1000.0)
gen.add("cross_i", double_t, 0, "This is I gain value of cross-track-error control", 0.0,0.0,1000.0)
gen.add("cross_d", double_t, 0, "This is D gain value of cross-track-error control", 0.0,0.0,1000.0)
gen.add("vel_p", double_t, 0, "THis is P gain value of velocity control", 1.0, 0.0, 1000.0)
gen.add("vel_i", double_t, 0, "THis is I gain value of velocity control", 1.0, 0.0, 1000.0)
gen.add("vel_d", double_t, 0, "THis is D gain value of velocity control", 1.0, 0.0, 1000.0)
gen.add("use_heartbeat", bool_t, 0, "Use heartbeat from GCS to check alive", False)


exit(gen.generate(PACKAGE, "jmoab_autopilot_ros", cfg_file_name))